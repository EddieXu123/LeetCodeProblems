/*
 * Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
 * Your algorithm's runtime complexity must be in the order of O(log n).
 * If the target is not found in the array, return [-1, -1].
 * 
 * Basic idea: We only care about the first index of the target element and the next element greater than the target element
 * This is an implementation of binary search except we can combine the arr[middle] == k with arr[middle] >= k because of our idea above
 */

class FirstAndLastIndexOfElement {
    
	/*
	 * Helper method to find the first index of an integer in an array
	 * @param arr, the given array
	 * @param k, the target integer
	 * @return the first position of the element in the array
	 */
    public int firstIndex(int[] arr, int k) {
        int left = 0, right = arr.length - 1;
        // Keeps track of the index of the first position (We want it to be arr.length in case element doesn't exist so it doesn't return {0, 0} as it would in the firstLast method)
        int firstPos = arr.length;
        
        while (left <= right) {
        	// pointer keeping track of middle index of range of possible values
            int middle = left + (right - left) / 2;
            // If the element at that position is either greater or equal to k
            if (arr[middle] >= k) {
            	// We can shift our right pointer the to left as we would in binary search
                right = middle - 1;
                // The first position is the middle. This loop will continue until we reach the first position of the element.
                firstPos = middle;
            }
            else {
            	// Otherwise, like in binary search, we throw away half of the current array and work with only the possible values
                left = middle + 1;
            }
        }
        return firstPos;
    }
    
    
    /*
     * Method to find the first and last index of an element
     */
    public int[] firstLast(int[] nums, int target) {
    	// Pointer to the first incident of our target value
        int first = firstIndex(nums, target);
        // Pointer to any number greater than our target value. We want the minus one because index starts at zero.
        int last = firstIndex(nums, target + 1) - 1;
        // If our pointers are correct in range, return our answer
        if (first <= last) {
            return new int[]{first, last};
        }
        // Element is not in array
        return new int[]{-1, -1};
    }
}
